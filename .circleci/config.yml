version: 2.1

executors:
  java-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo

parameters:
  browser:
    type: string
    default: "chrome" # Default browser
  feature_tag:
    type: string
    default: "@featureTag" # Default test case tag
  environment:
    type: string
    default: "dev" # Default environment
  email:
    type: string
    default: "niroshanvc@gmail.com" # Default email

jobs:
  build:
    executor: java-executor
    resource_class: large # Increase resource allocation
    parameters:
      browser:
        type: string
      feature_tag:
        type: string
      environment:
        type: string
      email:
        type: string
    steps:
      - checkout
      - run:
          name: Install Dependencies and Google Chrome with compatible ChromeDriver
          command: |
            set -ex # Exit immediately if a command exits with a non-zero status, and print commands.

            echo "--- [1/7] Updating package list and installing prerequisite packages ---"
            sudo apt-get update
            # xvfb for headless browser, unzip for chromedriver, binutils for?, jq for JSON parsing (CfT), curl & wget for downloads
            sudo apt-get install -y xvfb unzip binutils jq curl wget

            echo "--- [2/7] Adding Google Chrome's official repository ---"
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

            echo "--- [3/7] Updating package list and installing Google Chrome Stable ---"
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable

            echo "--- [4/7] Determining installed Google Chrome version ---"
            CHROME_VERSION_OUTPUT=$(google-chrome --version)
            # Extracts the version number (e.g., "125.0.6422.112") from output like "Google Chrome 125.0.6422.112"
            CHROME_VERSION_FULL=$(echo "$CHROME_VERSION_OUTPUT" | awk '{print $3}')

            if [ -z "$CHROME_VERSION_FULL" ]; then
                echo "Error: Failed to determine Google Chrome version from output: $CHROME_VERSION_OUTPUT"
                exit 1
            fi
            echo "Installed Google Chrome Full Version: $CHROME_VERSION_FULL"

            CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION_FULL" | cut -d '.' -f 1)
            # CHROME_BUILD_PREFIX is like major.minor.patch (e.g., 125.0.6422)
            CHROME_BUILD_PREFIX=$(echo "$CHROME_VERSION_FULL" | cut -d '.' -f 1-3)
            echo "Installed Google Chrome Major Version: $CHROME_MAJOR_VERSION"
            echo "Installed Google Chrome Build Prefix: $CHROME_BUILD_PREFIX"

            CHROMEDRIVER_DOWNLOAD_URL=""
            # This variable will hold the version string that Chromedriver uses in its download URL structure (might be Chrome version or specific Chromedriver version)
            ACTUAL_VERSION_FOR_URL="" 

            echo "--- [5/7] Determining compatible ChromeDriver version and download URL ---"
            if [ "$CHROME_MAJOR_VERSION" -ge 115 ]; then
                echo "Chrome major version is $CHROME_MAJOR_VERSION (>= 115). Using new Chrome for Testing (CfT) JSON endpoints."
                CFT_RELEASE_URL_BASE="https://googlechromelabs.github.io/chrome-for-testing"
                ACTUAL_VERSION_FOR_URL="" # Initialize as empty
            
                # Function to fetch and validate version
                fetch_and_validate_version() {
                    local url_to_check="$1"
                    local version_identifier="$2"
                    local temp_version
                    temp_version=$(curl -sS "$url_to_check")
            
                    # Check if the response looks like an HTML page (error) or is empty
                    if [[ -z "$temp_version" || "$temp_version" == *"<!DOCTYPE html>"* || "$temp_version" == *"<html>"* ]]; then
                        echo "No valid LATEST_RELEASE found for ${version_identifier} at ${url_to_check}. Response was: ${temp_version:0:100}..." # Log first 100 chars of response
                        echo "" # Return empty string
                    else
                        echo "$temp_version" # Return valid version
                    fi
                }
          
                # Attempt 1: Try to get LATEST_RELEASE with the full Chrome version string.
                echo "Attempting LATEST_RELEASE with full version: ${CHROME_VERSION_FULL}"
                ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_VERSION_FULL}" "${CHROME_VERSION_FULL}")
                  
                # Attempt 2: If not found, try with CHROME_BUILD_PREFIX (major.minor.patch).
                if [ -z "$ACTUAL_VERSION_FOR_URL" ]; then
                    echo "Trying with build prefix: ${CHROME_BUILD_PREFIX}"
                    ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_BUILD_PREFIX}" "${CHROME_BUILD_PREFIX}")
                fi
            
                # Attempt 3: If still not found, try with CHROME_MAJOR_VERSION.
                if [ -z "$ACTUAL_VERSION_FOR_URL" ]; then
                    echo "Trying with major version: ${CHROME_MAJOR_VERSION}"
                    ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_MAJOR_VERSION}" "${CHROME_MAJOR_VERSION}")
                fi
                
                if [ -n "$ACTUAL_VERSION_FOR_URL" ]; then
                    CHROMEDRIVER_DOWNLOAD_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${ACTUAL_VERSION_FOR_URL}/linux64/chromedriver-linux64.zip"
                else
                    # Fallback: Parse the full known-good-versions-with-downloads.json
                    echo "Could not determine Chromedriver version from LATEST_RELEASE_* endpoints. Attempting to parse known-good-versions-with-downloads.json..."
                    CFT_JSON_URL="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json"
                    URL_FROM_JSON=$(curl -sS "$CFT_JSON_URL" | jq -r --arg ver_prefix "$CHROME_BUILD_PREFIX" '
                        .versions[] |
                        select(.version | startswith($ver_prefix)) |
                        .versions_with_downloads.downloads.chromedriver[] |
                        select(.platform=="linux64").url' | tail -n 1)
                
                    if [ -n "$URL_FROM_JSON" ]; then
                        CHROMEDRIVER_DOWNLOAD_URL="$URL_FROM_JSON"
                        ACTUAL_VERSION_FOR_URL=$(echo "$CHROMEDRIVER_DOWNLOAD_URL" | grep -oP 'chrome-for-testing/\K[^/]+')
                    else
                        echo "Failed to find a suitable Chromedriver version from CfT JSON for Chrome build prefix ${CHROME_BUILD_PREFIX}."
                    fi
                fi

            else
                # For Chrome versions older than 115
                echo "Chrome major version is $CHROME_MAJOR_VERSION (< 115). Using legacy Chromedriver storage."
                ACTUAL_VERSION_FOR_URL=$(curl -sS "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION}")
                if [ -n "$ACTUAL_VERSION_FOR_URL" ]; then
                    CHROMEDRIVER_DOWNLOAD_URL="https://chromedriver.storage.googleapis.com/${ACTUAL_VERSION_FOR_URL}/chromedriver_linux64.zip"
                else
                    echo "Could not determine legacy Chromedriver version for Chrome Major $CHROME_MAJOR_VERSION."
                fi
            fi

            if [ -z "$CHROMEDRIVER_DOWNLOAD_URL" ]; then
                echo "Error: Failed to determine a valid Chromedriver download URL after all attempts."
                echo "Diagnostic Info:"
                echo "  Installed Chrome Full Version: $CHROME_VERSION_FULL"
                echo "  Installed Chrome Major Version: $CHROME_MAJOR_VERSION"
                echo "  Installed Chrome Build Prefix: $CHROME_BUILD_PREFIX"
                echo "  Last determined ACTUAL_VERSION_FOR_URL: $ACTUAL_VERSION_FOR_URL"
                exit 1
            fi

            echo "Using Chromedriver version (derived for URL): $ACTUAL_VERSION_FOR_URL"
            echo "Downloading Chromedriver from: $CHROMEDRIVER_DOWNLOAD_URL"

            echo "--- [6/7] Downloading and Installing ChromeDriver ---"
            curl -sS -L -o chromedriver.zip "$CHROMEDRIVER_DOWNLOAD_URL"
            # Unzip, -o overwrites existing files without prompting.
            unzip -o chromedriver.zip

            # Official Chromedriver zips for Chrome 115+ (from CfT) create a 'chromedriver-linux64' directory.
            # Older Chromedriver zips extract 'chromedriver' binary directly to the current directory.
            if [ -d "chromedriver-linux64" ]; then
                echo "Detected 'chromedriver-linux64' directory (new CfT structure)."
                sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                rm -rf chromedriver-linux64 # Clean up the directory
            else
                echo "Assuming 'chromedriver' binary in current directory (legacy structure)."
                sudo mv chromedriver /usr/local/bin/chromedriver
            fi

            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver.zip # Clean up the downloaded zip file

            echo "--- [7/7] Verifying installations ---"
            echo "Google Chrome version:"
            google-chrome --version
            echo "ChromeDriver version:"
            chromedriver --version

            echo "--- Installation and setup complete ---"
      - run:
          name: Generate Cucumber Reports
          command: mvn clean verify -Dcucumber.filter.tags="<< parameters.feature_tag >>" -Dwebdriver.chrome.headless=false
      - run:
          name: Prepare Report for Email
          command: |
            #  This assumes Surefire reports are in target/surefire-reports
            #  You might need to adjust this based on your report location and type
            cd target/surefire-reports
            for file in *.txt *.xml *.html; do  # Adjust file extensions as needed
              if [ -f "$file" ]; then
                if ! file -i "$file" | grep -q "charset=utf-8"; then
                  echo "Converting $file to UTF-8"
                  iconv -f ISO-8859-1 -t UTF-8 "$file" -o "$file.utf8" && mv "$file.utf8" "$file"
                fi
              else
                echo "Skipping $file as it does not exist"
              fi
            done
            zip -r test-report.zip .   # Zip the reports
            cd ../..  # Go back to the repo root

      - store_artifacts:
          path: target/cucumber-reports  # Path to cucumber reports
          destination: cucumber-reports

      - store_artifacts:
          path: target/surefire-reports/test-report.zip
          destination: test-report.zip

      - run:
          name: Send Email Without Attachment
          command: |
            echo '{
              "from": {
                "email": "niroshan.desilva@carehires.com"
              },
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "<< parameters.email >>"
                    }
                  ],
                  "subject": "Test Execution Report for << parameters.environment >>"
                }
              ],
              "content": [
                {
                  "type": "text/plain",
                  "value": "The test execution report is attached."
                }
              ]
            }' > email_payload.json

            curl -X POST https://api.sendgrid.com/v3/mail/send \
              -H "Authorization: Bearer $SENDGRID_API_KEY" \
              -H "Content-Type: application/json" \
              -d @email_payload.json || echo "Error sending email!"
      - run:
          name: Send Email with Attachment
          command: |
            export LC_ALL=en_US.UTF-8
            export LANG=en_US.UTF-8

            # Encode the attachment
            base64 -w 0 target/surefire-reports/test-report.zip > encoded_attachment.txt

            # Construct the JSON payload
            echo '{
              "from": {
                "email": "niroshan.desilva@carehires.com"
              },
              "personalizations": [
                {
                  "to": [
                    {
                      "email": "<< parameters.email >>"
                    }
                  ],
                  "subject": "Test Execution Report for << parameters.environment >>"
                }
              ],
              "content": [
                {
                  "type": "text/plain",
                  "value": "The test execution report is attached."
                }
              ],
              "attachments": [
                {
                  "content": "'$(cat encoded_attachment.txt)'",
                  "filename": "test-report.zip",
                  "type": "application/zip",
                  "disposition": "attachment"
                }
              ]
            }' > email_payload.json

            # Debug the JSON payload
            echo "Generated email payload:"
            head -c 1000 email_payload.json  # Print the first 1000 characters for debugging

            # Send the email using SendGrid API
            curl -X POST https://api.sendgrid.com/v3/mail/send \
              -H "Authorization: Bearer $SENDGRID_API_KEY" \
              -H "Content-Type: application/json" \
              -d @email_payload.json || echo "Error sending email!"

workflows:
  version: 2
  test-workflow:
    jobs:
      - build:
          browser: << pipeline.parameters.browser >>
          feature_tag: << pipeline.parameters.feature_tag >>
          environment: << pipeline.parameters.environment >>
          email: << pipeline.parameters.email >>