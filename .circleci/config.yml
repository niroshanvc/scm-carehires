version: 2.1

executors:
  java-executor:
    docker:
      - image: cimg/openjdk:17.0
    working_directory: ~/repo

parameters:
  browser:
    type: string
    default: "chrome" # Default browser
  feature_tag:
    type: string
    default: "@featureTag" # Default test case tag
  environment:
    type: string
    default: "dev" # Default environment
  email:
    type: string
    default: "niroshanvc@gmail.com" # Default email

jobs:
  build:
    executor: java-executor
    resource_class: large # Increase resource allocation
    parameters:
      browser:
        type: string
      feature_tag:
        type: string
      environment:
        type: string
      email:
        type: string
    steps:
      - checkout
      - run:
          name: Install Dependencies and Google Chrome with compatible ChromeDriver
          command: |
            set -ex # Exit immediately if a command exits with a non-zero status, and print commands.

            echo "--- [1/7] Updating package list and installing prerequisite packages ---"
            sudo apt-get update
            # xvfb for headless browser, unzip for chromedriver, binutils for system utilities, jq for JSON parsing, curl & wget for downloads
            sudo apt-get install -y xvfb unzip binutils jq curl wget

            echo "--- [2/7] Adding Google Chrome's official repository ---"
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

            echo "--- [3/7] Updating package list and installing Google Chrome Stable ---"
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable

            echo "--- [4/7] Determining installed Google Chrome version ---"
            CHROME_VERSION_OUTPUT=$(google-chrome --version)
            # Extracts the version number (e.g., "125.0.6422.112") from output like "Google Chrome 125.0.6422.112"
            CHROME_VERSION_FULL=$(echo "$CHROME_VERSION_OUTPUT" | awk '{print $3}')

            if [ -z "$CHROME_VERSION_FULL" ]; then
                echo "Error: Failed to determine Google Chrome version from output: $CHROME_VERSION_OUTPUT" >&2
                exit 1
            fi
            echo "Installed Google Chrome Full Version: $CHROME_VERSION_FULL"

            CHROME_MAJOR_VERSION=$(echo "$CHROME_VERSION_FULL" | cut -d '.' -f 1)
            # CHROME_BUILD_PREFIX is like major.minor.patch (e.g., 125.0.6422)
            CHROME_BUILD_PREFIX=$(echo "$CHROME_VERSION_FULL" | cut -d '.' -f 1-3)
            echo "Installed Google Chrome Major Version: $CHROME_MAJOR_VERSION"
            echo "Installed Google Chrome Build Prefix: $CHROME_BUILD_PREFIX"

            CHROMEDRIVER_DOWNLOAD_URL=""
            # This variable will hold the version string that Chromedriver uses in its download URL structure
            ACTUAL_VERSION_FOR_URL=""

            echo "--- [5/7] Determining compatible ChromeDriver version and download URL ---"

            if [ "$CHROME_MAJOR_VERSION" -ge 115 ]; then
                echo "Chrome major version is $CHROME_MAJOR_VERSION (>= 115). Using new Chrome for Testing (CfT) JSON endpoints."
                CFT_RELEASE_URL_BASE="https://googlechromelabs.github.io/chrome-for-testing"
                ACTUAL_VERSION_FOR_URL="" # Initialize as empty

                # Function to fetch and validate version from CfT LATEST_RELEASE_* endpoints
                fetch_and_validate_version() {
                    local url_to_check="$1"
                    local version_identifier="$2"
                    local temp_version
                    # Fetch the content from the URL. --fail makes curl return an error on server errors (4xx, 5xx).
                    temp_version=$(curl --fail -sS "$url_to_check")
                    local curl_exit_code=$? # Capture curl's exit code

                    # Check if curl failed OR if the response is HTML (indicative of a soft 404 or error page) or is empty
                    if [ "$curl_exit_code" -ne 0 ] || [[ -z "$temp_version" || "$temp_version" == *"<!DOCTYPE html>"* || "$temp_version" == *"<html>"* ]]; then
                        # Print diagnostic message to stderr
                        echo "Error: No valid LATEST_RELEASE found for ${version_identifier} at ${url_to_check}." >&2
                        if [ "$curl_exit_code" -ne 0 ]; then
                            echo "Info: curl for ${url_to_check} exited with code ${curl_exit_code}." >&2
                        else
                            echo "Info: Response for ${version_identifier} (first 100 chars): '${temp_version:0:100}...'" >&2
                        fi
                        # Output an empty string to stdout (to be captured by the command substitution)
                        echo ""
                    else
                        # Output the valid version string to stdout
                        echo "$temp_version"
                    fi
                }

                # Attempt 1: Try to get LATEST_RELEASE with the full Chrome version string.
                echo "Attempting LATEST_RELEASE with full version: ${CHROME_VERSION_FULL}"
                ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_VERSION_FULL}" "${CHROME_VERSION_FULL}")

                # Attempt 2: If not found, try with CHROME_BUILD_PREFIX (major.minor.patch).
                if [ -z "$ACTUAL_VERSION_FOR_URL" ]; then
                    echo "Trying with build prefix: ${CHROME_BUILD_PREFIX}"
                    ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_BUILD_PREFIX}" "${CHROME_BUILD_PREFIX}")
                fi

                # Attempt 3: If still not found, try with CHROME_MAJOR_VERSION.
                if [ -z "$ACTUAL_VERSION_FOR_URL" ]; then
                    echo "Trying with major version: ${CHROME_MAJOR_VERSION}"
                    ACTUAL_VERSION_FOR_URL=$(fetch_and_validate_version "${CFT_RELEASE_URL_BASE}/LATEST_RELEASE_${CHROME_MAJOR_VERSION}" "${CHROME_MAJOR_VERSION}")
                fi

                if [ -n "$ACTUAL_VERSION_FOR_URL" ]; then
                    CHROMEDRIVER_DOWNLOAD_URL="https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${ACTUAL_VERSION_FOR_URL}/linux64/chromedriver-linux64.zip"
                else
                    # Fallback: Parse the full known-good-versions-with-downloads.json
                    echo "Info: Could not determine Chromedriver version from LATEST_RELEASE_* endpoints. Attempting to parse known-good-versions-with-downloads.json..." >&2
                    CFT_JSON_URL="https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json"

                    JSON_RESPONSE=$(curl --fail -sS "$CFT_JSON_URL")
                    JSON_CURL_EXIT_CODE=$?

                    if [ "$JSON_CURL_EXIT_CODE" -ne 0 ]; then
                        echo "Error: Failed to download ${CFT_JSON_URL}. curl exited with code $JSON_CURL_EXIT_CODE." >&2
                        URL_FROM_JSON=""
                    else
                        URL_FROM_JSON=$(echo "$JSON_RESPONSE" | jq -r --arg ver_prefix "$CHROME_BUILD_PREFIX" '
                            .versions[] | 
                            select(.version | startswith($ver_prefix)) | 
                            .downloads.chromedriver[] | 
                            select(.platform=="linux64").url' | tail -n 1)
                    fi

                    if [ -n "$URL_FROM_JSON" ]; then
                        CHROMEDRIVER_DOWNLOAD_URL="$URL_FROM_JSON"
                        ACTUAL_VERSION_FOR_URL=$(echo "$CHROMEDRIVER_DOWNLOAD_URL" | grep -oP 'chrome-for-testing/\K[^/]+')
                    else
                        echo "Error: Failed to find a suitable Chromedriver version from CfT JSON for Chrome build prefix ${CHROME_BUILD_PREFIX}." >&2
                    fi
                fi
            else
                # For Chrome versions older than 115
                echo "Chrome major version is $CHROME_MAJOR_VERSION (< 115). Using legacy Chromedriver storage."
                ACTUAL_VERSION_FOR_URL="" # Initialize
                LEGACY_URL="https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR_VERSION}"

                ACTUAL_VERSION_FOR_URL_TEMP=$(curl --fail -sS "$LEGACY_URL")
                curl_exit_code=$?

                # Check if curl failed, or if response is empty or looks like an XML error page from Google Storage
                if [ "$curl_exit_code" -ne 0 ] || [ -z "$ACTUAL_VERSION_FOR_URL_TEMP" ] || [[ "$ACTUAL_VERSION_FOR_URL_TEMP" == *"<Error>"* ]] || [[ "$ACTUAL_VERSION_FOR_URL_TEMP" == *"</Error>"* ]]; then
                    echo "Error: Could not determine legacy Chromedriver version from ${LEGACY_URL} for Chrome Major $CHROME_MAJOR_VERSION." >&2
                    if [ "$curl_exit_code" -ne 0 ]; then
                        echo "Info: curl for ${LEGACY_URL} exited with code ${curl_exit_code}." >&2
                    else
                        echo "Info: Response was invalid or empty: '${ACTUAL_VERSION_FOR_URL_TEMP:0:100}...'" >&2
                    fi
                    # ACTUAL_VERSION_FOR_URL remains empty
                else
                    ACTUAL_VERSION_FOR_URL="$ACTUAL_VERSION_FOR_URL_TEMP"
                    CHROMEDRIVER_DOWNLOAD_URL="https://chromedriver.storage.googleapis.com/${ACTUAL_VERSION_FOR_URL}/chromedriver_linux64.zip"
                fi
            fi

            if [ -z "$CHROMEDRIVER_DOWNLOAD_URL" ]; then
                echo "Error: Failed to determine a valid Chromedriver download URL after all attempts." >&2
                echo "Diagnostic Info:" >&2
                echo "  Installed Chrome Full Version: $CHROME_VERSION_FULL" >&2
                echo "  Installed Chrome Major Version: $CHROME_MAJOR_VERSION" >&2
                echo "  Installed Chrome Build Prefix: $CHROME_BUILD_PREFIX" >&2
                echo "  Last determined ACTUAL_VERSION_FOR_URL: $ACTUAL_VERSION_FOR_URL" >&2
                exit 1
            fi

            echo "Using Chromedriver version (derived for URL): $ACTUAL_VERSION_FOR_URL"
            echo "Downloading Chromedriver from: $CHROMEDRIVER_DOWNLOAD_URL"

            echo "--- [6/7] Downloading and Installing ChromeDriver ---"
            # Adding --fail to curl for download and checking exit code
            curl --fail -sS -L -o chromedriver.zip "$CHROMEDRIVER_DOWNLOAD_URL"
            if [ $? -ne 0 ]; then
              echo "Error: Failed to download ChromeDriver from $CHROMEDRIVER_DOWNLOAD_URL" >&2
              exit 1
            fi

            unzip -o chromedriver.zip # -o overwrites existing files without prompting.

            if [ -d "chromedriver-linux64" ]; then
                echo "Detected 'chromedriver-linux64' directory (new CfT structure)."
                sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
                rm -rf chromedriver-linux64 
            else
                echo "Assuming 'chromedriver' binary in current directory (legacy or older CfT structure)."
                sudo mv chromedriver /usr/local/bin/chromedriver
            fi

            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver.zip

            echo "--- [7/7] Verifying installations ---"
            echo "Google Chrome version:"
            google-chrome --version
            echo "ChromeDriver version:"
            chromedriver --version

            echo "--- Installation and setup complete ---"

      - run:
          name: Generate Cucumber Reports
          command: mvn clean verify -Dcucumber.filter.tags="<< parameters.feature_tag >>" -Dwebdriver.chrome.headless=true

      - store_artifacts:
          path: target/cucumber-reports  # Path to cucumber reports
          destination: cucumber-reports

      - run:
          name: Save Build Job URL
          command: echo $CIRCLE_BUILD_URL > build_url.txt

      - persist_to_workspace:
          root: .
          paths:
              - build_url.txt  # Save the build URL for later use in email job

  # This job now uses a manual script instead of an orb
  email-report:
    executor: java-executor
    parameters:
      email_recipient:
        type: string
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Send Report Link via Email
          command: |
            # 1. Install swaks
            sudo apt-get update && sudo apt-get install -y swaks
            
            # Read the correct build URL from the file passed via workspace.
            CORRECT_BUILD_URL=$(cat build_url.txt)
            
            # 2. Define the email body in a variable.
            # The double quotes are essential for the $CIRCLE_BUILD_URL variable to be inserted correctly.
            EMAIL_BODY="The Cucumber test execution has completed. View the detailed HTML report by clicking the link below and navigating to the 'Artifacts' tab of the build:
            $CORRECT_BUILD_URL/artifacts"
            
            # 3. Call swaks using the --body flag and passing the variable.
            # Note there is no attachment, as we are sending a link.
            swaks \
              --to "<< parameters.email_recipient >>" \
              --from "$SMTP_USER" \
              --server "$SMTP_HOST:$SMTP_PORT" \
              --auth-user "$SMTP_USER" \
              --auth-password "$SMTP_PASSWORD" \
              --tls \
              --header "Subject: Cucumber Test Automation Report is Ready" \
              --body "$EMAIL_BODY"

workflows:
  version: 2
  test-and-email-workflow:
    jobs:
      - build:
          # Pass pipeline parameters to the build job
          browser: << pipeline.parameters.browser >>
          feature_tag: << pipeline.parameters.feature_tag >>
          environment: << pipeline.parameters.environment >>
          email: << pipeline.parameters.email >>

      - email-report:
          requires:
            - build
          email_recipient: << pipeline.parameters.email >>