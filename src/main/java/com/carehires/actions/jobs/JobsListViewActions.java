package com.carehires.actions.jobs;

import com.carehires.pages.jobs.JobsListViewPage;
import com.carehires.utils.BasePage;
import com.carehires.utils.ClipboardUtils;
import com.carehires.utils.CsvReaderUtils;
import com.carehires.utils.DataConfigurationReader;
import com.carehires.utils.FileWriterUtils;
import com.carehires.utils.GenericUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.testng.asserts.SoftAssert;

import java.io.File;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.is;

public class JobsListViewActions {

    private final JobsListViewPage listViewPage;
    private static GenericUtils genericUtils = null;

    private static final Logger logger = LogManager.getLogger(JobsListViewActions.class);

    static {
        try {
            genericUtils = new GenericUtils();
        } catch (BasePage.WebDriverInitializationException e) {
            logger.error("Error while initializing GenericUtils: {}}", e.toString());
        }
    }

    private static final String ENTITY = "job";
    private static final String YML_FILE = "job-view";
    private static final String YML_FILE_CREATE = "job-create";
    private static final String YML_FILE_CREATE_BREAKS = "job-create-with-breaks";
    private static final String YML_HEADER_JOB_PREFERENCES = "Job Preferences";
    private static final String YML_HEADER_JOB_DETAILS = "Job Details";
    private static final String YML_HEADER_JOB_CANCEL = "Cancel Job";
    private static final String YML_HEADER_JOB_DURATION = "Job Duration and Recurrence";
    private static final String YML_HEADER_SUBMIT_TIMESHEET = "Submit Timesheet";
    private static final String YML_SUB_HEADER_CARE_PROVIDER = "Care Provider / Site and Service Preferences";
    private static final String YML_HEADER_SUGGESTED_WORKER = "Suggested Worker";
    private static final String YML_HEADER_SELECTED_WORKER = "Selected Worker";
    private static final String YML_HEADER_REJECT_WORKER = "Reject Worker";
    private static final String REASON = "Reason";
    private static final String DESCRIPTION = "Description";
    private static final String RESOURCES = "resources";
    private static final String SRC_FOLDER = System.getProperty("user.dir") + File.separator + "src";
    private static final String TEST_RESOURCE_FOLDER = SRC_FOLDER + File.separator + "test" + File.separator + RESOURCES;
    private static final String SPECIAL_CSV = TEST_RESOURCE_FOLDER + File.separator + "agreement-special-rates.csv";

    String jobId;

    public JobsListViewActions() {
        listViewPage = new JobsListViewPage();
        try {
            PageFactory.initElements(BasePage.getDriver(), listViewPage);
        } catch (BasePage.WebDriverInitializationException e) {
            logger.error("Error while initializing Job List View Page elements: {}", e.getMessage());
        }
    }

    public void writeJobIdToAFile() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Writing autogenerated Job Id into a text file >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilPageCompletelyLoaded();
        jobId = getFirstJobId();
        String fileName = SRC_FOLDER + File.separator + "main" + File.separator + RESOURCES + File.separator +
                "most-recent-job-post.txt";

        FileWriterUtils.clearContent(fileName);
        FileWriterUtils.writeJobIdToAFile(jobId, fileName);
    }

    private void searchJobByJobId(String jobId) {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching a job by using job id >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementDisplayed(listViewPage.searchByJobIdInput, 30);
        BasePage.clickWithJavaScript(listViewPage.searchByJobIdInput);
        BasePage.clearAndEnterTexts(listViewPage.searchByJobIdInput, jobId);
        BasePage.clickOnEnterKey(listViewPage.searchByJobIdInput);
        BasePage.waitUntilElementPresent(listViewPage.finishSearch, 30);
    }

    public void searchJobByDateRange() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching jobs by entering a date range >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementDisplayed(listViewPage.dateRangeInput, 30);
        BasePage.clickWithJavaScript(listViewPage.dateRangeInput);
        String startDate = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_DETAILS, YML_HEADER_JOB_DURATION, "Start Date");
        String endDate = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_DETAILS, YML_HEADER_JOB_DURATION, "Ends On");
        genericUtils.selectDateFromCalendarPopup(startDate);
        genericUtils.selectDateFromCalendarPopup(endDate);
        BasePage.clickTabKey(listViewPage.dateRangeInput);
        BasePage.waitUntilElementPresent(listViewPage.finishSearch, 60);
    }

    public void searchByProviderName() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching jobs by selecting a provider name >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilPageCompletelyLoaded();
        BasePage.genericWait(5000);
        BasePage.clickWithJavaScript(listViewPage.providerDropdown);
        BasePage.genericWait(1000);
        String providerName = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_DETAILS, YML_SUB_HEADER_CARE_PROVIDER, "Care Provider");
        By by = By.xpath(listViewPage.getDropdownOptionXpath(providerName));
        BasePage.waitUntilVisibilityOfElementLocated(by, 30);
        BasePage.scrollToWebElement(listViewPage.getDropdownOptionXpath(providerName));
        BasePage.clickWithJavaScript(listViewPage.getDropdownOptionXpath(providerName));
        BasePage.clickTabKey(listViewPage.providerDropdown);
        BasePage.waitUntilElementPresent(listViewPage.finishSearch, 60);
    }

    private void searchByProviderSite(String siteName) {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching jobs by selecting a provider's site >>>>>>>>>>>>>>>>>>>>");
        BasePage.clickWithJavaScript(listViewPage.siteDropdown);
        BasePage.genericWait(1000);
        By by = By.xpath(listViewPage.getDropdownOptionXpath(siteName));
        BasePage.waitUntilVisibilityOfElementLocated(by, 30);
        BasePage.scrollToWebElement(listViewPage.getDropdownOptionXpath(siteName));
        BasePage.clickWithJavaScript(listViewPage.getDropdownOptionXpath(siteName));
    }

    public void selectJobByJobStatus(String status) {
        BasePage.refreshPage();
        BasePage.waitUntilPageCompletelyLoaded();
        BasePage.waitUntilElementPresent(listViewPage.finishSearch, 60);
        doSelectJobsByJobStatus(status);

        List<WebElement> statuses = listViewPage.jobStatuses;
        BasePage.waitUntilElementPresent(statuses.get(0), 60);

        if (status.equalsIgnoreCase("All Open")) {
            status = "OPEN";
        } else {
            status = status.toUpperCase();
        }

        // verify all status display as Suggested
        for (WebElement el : statuses) {
            BasePage.scrollToWebElement(el);
            String text = el.getText();
            if (status.equalsIgnoreCase("Open")) {
                if (text.equalsIgnoreCase("Suggested")
                        || text.equalsIgnoreCase("Open Over-due")) {
                    text = "OPEN";
                }
            } else if (status.equalsIgnoreCase("Open Over-due") && text.equalsIgnoreCase(
                    "Suggested")) {
                    text = "OPEN OVER-DUE";
                }


            assertThat("Filter by status is not working.", text, is(status));
        }
    }

    private void doSelectJobsByJobStatus(String jobStatus) {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching jobs by clicking on status button >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilPageCompletelyLoaded();
        String normalizedStatus = jobStatus.trim().toLowerCase();  // Normalize input
        switch(normalizedStatus) {
            case "all open":
                BasePage.waitUntilElementClickable(listViewPage.openStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.openStatusButton);
                break;
            case "open over-due":
                BasePage.waitUntilElementClickable(listViewPage.openOverDueStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.openOverDueStatusButton);
                break;
            case "suggested":
                BasePage.waitUntilElementClickable(listViewPage.suggestedStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.suggestedStatusButton);
                break;
            case "allocated":
                BasePage.waitUntilElementClickable(listViewPage.allocatedWorkerName, 60);
                BasePage.clickWithJavaScript(listViewPage.allocatedStatusButton);
                break;
            case "completed":
                BasePage.waitUntilElementClickable(listViewPage.completedStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.completedStatusButton);
                break;
            case "cancelled":
                BasePage.waitUntilElementClickable(listViewPage.cancelledStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.cancelledStatusButton);
                break;
            case "all":
                BasePage.waitUntilElementClickable(listViewPage.allStatusButton, 60);
                BasePage.clickWithJavaScript(listViewPage.allStatusButton);
                break;
           default:
               logger.error("Invalid job status {}", jobStatus);
        }
        BasePage.waitUntilElementPresent(listViewPage.finishSearch, 60);
    }

    private String getWorkerId() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Get Worker ID from UI >>>>>>>>>>>>>>>>>>>>");
        return BasePage.getText(listViewPage.allocatedWorkerName).trim();
    }

    private String getJobStartDate() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Get Job Start Date from UI >>>>>>>>>>>>>>>>>>>>");
        return BasePage.getText(listViewPage.jobStartDate).trim();
    }

    private String getJobStartTime() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Get Job Start Time from UI >>>>>>>>>>>>>>>>>>>>");
        return BasePage.getText(listViewPage.jobStartTime).trim();
    }

    private String getJobEndDate() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Get Job End Date from UI >>>>>>>>>>>>>>>>>>>>");
        return BasePage.getText(listViewPage.jobEndDate).trim();
    }

    private String getJobEndTime() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Get Job End Time from UI >>>>>>>>>>>>>>>>>>>>");
        return BasePage.getText(listViewPage.jobEndTime).trim();
    }

    private void clickOnViewDetailedJobInfo() {
        logger.info("<<<<<<<<<<<<<<<<<<< Move to a three dots and click on View Detailed Job Info >>>>>>>>>>>>>>>>");
        BasePage.genericWait(2000);
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.viewDetailedJobInfo);
    }

    private void clickOnCopyJobDetailsOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<< Move to three dots on Job Detail popup and Click on Copy Job Details >>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.jobDetailsPopupThreeDots,
                JobsListViewPage.jobDetailsPopupCopyJobDetails);
    }

    public void verifyFunctionalityOfCopyJobDetailsOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<< Verifying functionality of Copy Job Details on Job Details Popup >>>>>>>>>>>>>");
        clickOnCopyJobDetailsOnJobDetailsPopup();

        verifyingFunctionalityOfCopyJobDetails();
    }

    private void clickOnAuditLogOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<< Move to three dots on Job Detail popup and Click on Audit Log >>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(JobsListViewPage.jobDetailsPopupThreeDots, 30);
        BasePage.mouseHoverAndClick(JobsListViewPage.jobDetailsPopupThreeDots, JobsListViewPage.
                jobDetailsPopupAuditLog);
    }

    private void clickOnCancelJobOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<< Move to three dots on Job Detail popup and Click on Cancel Job >>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(JobsListViewPage.jobDetailsPopupThreeDots, 30);
        BasePage.mouseHoverAndClick(JobsListViewPage.jobDetailsPopupThreeDots, JobsListViewPage.
                jobDetailsPopupCancelJob);
    }

    private void confirmingCancelJob(String reason, String description) {
        logger.info("<<<<<<<<<<<<<<<<<<<< Confirming Cancel Job on Cancel Job popup >>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.reasonDropdownButtonOnCancelJobPopup, 30);
        BasePage.clickWithJavaScript(listViewPage.reasonDropdownButtonOnCancelJobPopup);
        BasePage.genericWait(1000);
        By by = By.xpath(listViewPage.getDropdownOptionXpath(reason));
        BasePage.waitUntilVisibilityOfElementLocated(by, 30);
        BasePage.scrollToWebElement(listViewPage.getDropdownOptionXpath(reason));
        BasePage.clickWithJavaScript(listViewPage.getDropdownOptionXpath(reason));

        if (reason.equalsIgnoreCase("Other")) {
            BasePage.waitUntilElementDisplayed(listViewPage.descriptionTextAreaOnCancelJobsPopup, 30);
            BasePage.clearAndEnterTexts(listViewPage.descriptionTextAreaOnCancelJobsPopup, description);
        }

        BasePage.waitUntilElementClickable(listViewPage.continueButtonOnCancelJobPopup, 30);
        BasePage.clickWithJavaScript(listViewPage.continueButtonOnCancelJobPopup);

        BasePage.waitUntilElementClickable(listViewPage.cancelJobButton, 30);
        BasePage.clickWithJavaScript(listViewPage.cancelJobButton);
    }

    private void verifyingFunctionalityOfCopyJobDetails() {
        BasePage.genericWait(3000); // Wait for the text to be copied
        String expectedJobId = "";
        String expectedJobStatus = "";
        String expectedProvider = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_DETAILS, YML_SUB_HEADER_CARE_PROVIDER, "Care Provider");
        String expectedSite = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_DETAILS,
                YML_SUB_HEADER_CARE_PROVIDER, "Site");
        String expectedAgency = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE,
                YML_HEADER_JOB_PREFERENCES, "Agency");
        String expectedWorker = getWorkerId();
        String expectedStartDate = getJobStartDate();
        String expectedStartTime = getJobStartTime();
        String expectedEndDate = getJobEndDate();
        String expectedEndTime = getJobEndTime();

        String copiedText = ClipboardUtils.getClipboardText();

        SoftAssert softAssert = new SoftAssert();
        softAssert.assertTrue(copiedText.contains(expectedJobId), "Job ID mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedJobStatus), "Job Status mismatch!");
        assert expectedProvider != null;
        softAssert.assertTrue(copiedText.contains(expectedProvider), "Provider name mismatch!");
        assert expectedSite != null;
        softAssert.assertTrue(copiedText.contains(expectedSite), "Provider Site mismatch!");
        assert expectedAgency != null;
        softAssert.assertTrue(copiedText.contains(expectedAgency), "Agency name mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedWorker), "Worker name mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedStartDate), "Job start date mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedStartTime), "Job start time mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedEndDate), "Job end date mismatch!");
        softAssert.assertTrue(copiedText.contains(expectedEndTime), "Job end time mismatch!");
        softAssert.assertAll();
    }

    private void clickOnCopyJobDetails() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to a three dots and Click on Copy Job Details >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.copyJobDetails);
    }

    public void verifyFunctionalityOfCopyJobDetails() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Verifying functionality of Copy Job Details >>>>>>>>>>>>>>>>>>>>");
        clickOnCopyJobDetails();
        verifyingFunctionalityOfCopyJobDetails();
    }

    private void clickOnJobDetailPopupCopyJobDetails() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Click on Copy Job Details on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.detailViewThreeDots, JobsListViewPage.detailViewCopyJobDetails);
    }

    private void clickOnJobDetailPopupAuditLog() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Click on Audit Log on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.detailViewThreeDots, JobsListViewPage.detailViewAuditLog);
    }

    private void clickOnJobDetailPopupCancelJob() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Click on Cancel Job on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.detailViewThreeDots, JobsListViewPage.detailViewCancelJob);
    }

    private void gotoEligibleWorkersTabOnJobDetailPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to Eligible Workers tab on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.detailViewEligibleWorkersTab, 30);
        BasePage.scrollToWebElement(listViewPage.detailViewEligibleWorkersTab);
        BasePage.clickWithJavaScript(listViewPage.detailViewEligibleWorkersTab);
    }

    public void suggestAWorkerOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Suggesting a worker >>>>>>>>>>>>>>>>>>>>");
        BasePage.refreshPage();
        clickOnViewDetailedJobInfo();
        gotoEligibleWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnSuggestButtonOnJobDetails();
        verifyWorkerSuggestSuccessMessage();
    }

    private void waitAndSuggestThisWorkerButtonOnConfirmActionPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Clicking on Suggest this worker button >>>>>>>>>>>>>>>>>>>>");
        try{
            BasePage.waitUntilElementClickable(listViewPage.suggestThisWorkerButton, 30);
            BasePage.clickWithJavaScript(listViewPage.suggestThisWorkerButton);
        } catch (NoSuchElementException e) {
            logger.info("/////////////// Confirm Action popup is not loaded! ///////////////");
        }
    }

    private void clickOnSuggestButtonOnJobDetails() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Clicking on Suggest button on Job Details popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.genericWait(5000);
        BasePage.waitUntilElementClickable(listViewPage.suggestButtonOnJobDetailsPopup.get(0), 60);
        BasePage.clickWithJavaScript(listViewPage.suggestButtonOnJobDetailsPopup.get(0));
    }

    private void gotoSuggestedWorkersTabOnJobDetailPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to Suggested Workers tab on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.detailViewSuggestedWorkersTab, 30);
        BasePage.clickWithJavaScript(listViewPage.detailViewSuggestedWorkersTab);
    }

    private void gotoSelectedWorkersTabOnJobDetailPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to Selected Workers tab on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.detailViewSelectedWorkersTab, 30);
        BasePage.clickWithJavaScript(listViewPage.detailViewSelectedWorkersTab);
    }

    private void gotoRejectedWorkersTabOnJobDetailPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to Rejected Workers tab on Job Detail Popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.detailViewRejectedWorkersTab,30);
        BasePage.clickWithJavaScript(listViewPage.detailViewRejectedWorkersTab);
    }

    private void workersFilterByAgencyOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Searching eligible workers >>>>>>>>>>>>>>>>>>>>");
        BasePage.genericWait(2000);
        BasePage.waitUntilElementClickable(listViewPage.detailViewWorkersFilterByAgencyDropdown,30);
        BasePage.clickWithJavaScript(listViewPage.detailViewWorkersFilterByAgencyDropdown);
        String agency = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE_BREAKS,
                YML_HEADER_JOB_PREFERENCES, "Agency");
        By by = By.xpath(listViewPage.getDropdownOptionXpath(agency));
        BasePage.waitUntilVisibilityOfElementLocated(by,30);
        BasePage.scrollToWebElement(listViewPage.getDropdownOptionXpath(agency));
        BasePage.clickWithJavaScript(listViewPage.getDropdownOptionXpath(agency));
        BasePage.clickTabKey(listViewPage.detailViewWorkersFilterByAgencyDropdown);
    }

    private void clickOnChAdminNote() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to a three dots and open CH Admin Note >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(JobsListViewPage.firstThreeDots,60);
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.chAdminNote);
    }

    private void clickOnManageAllocations() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to a three dots and open Manage Allocations >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.manageAllocations);
    }

    private void clickOnCancelJob() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Move to a three dots and open Cancel Job >>>>>>>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.cancelJob);
    }

    private void verifyWorkerSuggestSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Created new application for";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Worker suggest success message is wrong!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    private void verifyWorkerRejectSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Rejected application by";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Worker reject success message is wrong!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    public void rejectSuggestedWorkerOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Rejecting a suggested worker >>>>>>>>>>>>>>>>>>>>");
        gotoSuggestedWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnRejectButtonOnSelectedTabJobDetailsPopup(YML_HEADER_SUGGESTED_WORKER);
        verifyWorkerRejectSuccessMessage();
    }

    public void selectSuggestedWorkerOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Selecting a suggested worker >>>>>>>>>>>>>>>>>>>>");
        gotoSuggestedWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnSelectButtonOnSuggestedTabJobDetailsPopup();
        String text = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, "Manage Allocation",
                "Select Worker", "Note");
        BasePage.waitUntilElementDisplayed(listViewPage.statementOfWorkNoteTextarea, 30);
        BasePage.typeWithStringBuilder(listViewPage.statementOfWorkNoteTextarea, text);
        String str = BasePage.getAttributeValue(listViewPage.statementOfWorkCheckboxSelectOrNot, "class");
        boolean value = str.contains("invalid");
        if (value) {
            BasePage.clickWithJavaScript(listViewPage.statementOfWorkConfirmCheckbox);
        }
        BasePage.waitUntilElementClickable(listViewPage.statementOfWorkSelectButton, 30);
        BasePage.clickWithJavaScript(listViewPage.statementOfWorkSelectButton);
        verifyWorkerSelectSuccessMessage();
    }

    private void clickOnSelectButtonOnSuggestedTabJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<< Clicking on Select button on Suggested Worker - Job Details popup >>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.selectButtonOnViewJobDetailPopup, 60);
        BasePage.clickWithJavaScript(listViewPage.selectButtonOnViewJobDetailPopup);
    }

    private void clickOnRejectButtonOnSelectedTabJobDetailsPopup(String mainHeader) {
        logger.info("<<<<<<<<<<<<<<<< Clicking on Reject button on Suggested Worker - Job Details popup >>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.rejectButtonOnViewJobDetailPopup, 60);
        BasePage.clickWithJavaScript(listViewPage.rejectButtonOnViewJobDetailPopup);

        // on reject popup
        BasePage.waitUntilElementClickable(listViewPage.rejectButtonOnViewJobDetailPopup, 60);
        String text = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, mainHeader,
                YML_HEADER_REJECT_WORKER, "Reason to reject");
        BasePage.typeWithStringBuilder(listViewPage.reasonToRejectTextareaOnSuggestedWorkerRejectPopup, text);
        BasePage.clickWithJavaScript(listViewPage.rejectButtonOnRejectPopup);
    }

    public void selectRejectedWorkerOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Selecting a Rejected worker >>>>>>>>>>>>>>>>>>>>");
        gotoRejectedWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnSelectButtonOnJobDetails();
        verifyWorkerSelectSuccessMessage();
    }

    private void clickOnSelectButtonOnJobDetails() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Clicking on Select button on Job Details popup >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.selectButtonOnDetailViewTab, 60);
        BasePage.clickWithJavaScript(listViewPage.selectButtonOnDetailViewTab);
    }

    private void verifyWorkerSelectSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Accepted application by";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Worker select success message is wrong!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    public void rejectSelectedWorkerOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Reject a selected worker >>>>>>>>>>>>>>>>>>>>");
        gotoSelectedWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnRejectButtonOnSelectedTabJobDetailsPopup(YML_HEADER_SELECTED_WORKER);
        verifyWorkerRejectSuccessMessage();
    }

    public void fillingTimesheets() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Filling timesheet for the selected job >>>>>>>>>>>>>>>>>>>>");
        clickOnTimesheetsButton();
        clickOnSubmitTimesheetButton();
        enterDataOnEditTimesheet();
    }

    private void enterDataOnEditTimesheet() {
        String doc = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_SUBMIT_TIMESHEET,
                "Proof Document");
        String docPath = TEST_RESOURCE_FOLDER + File.separator + "Upload" + File.separator + "Job" + File.separator +
                "Timesheet"+ File.separator + doc;
        BasePage.uploadFile(listViewPage.proofDocument, docPath);

        String startDate = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE_BREAKS,
                YML_HEADER_JOB_DETAILS, YML_HEADER_JOB_DURATION, "Start Date");
        BasePage.clickWithJavaScript(listViewPage.startDateInput);
        genericUtils.selectDateFromCalendarPopup(startDate);

        selectTime("Start Time", listViewPage.startTimeInput, listViewPage.startTimeAreaList, listViewPage.
                availableStartTimes, listViewPage.startTimeSelectionOkButton);

        String endDate = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE,
                YML_HEADER_SUBMIT_TIMESHEET, "Ends On");
        BasePage.clickWithJavaScript(listViewPage.endDateInput);
        genericUtils.selectDateFromCalendarPopup(endDate);

        selectTime("Ends Time", listViewPage.endTimeInput, listViewPage.endTimeAreaList, listViewPage.
                availableEndTimes, listViewPage.endTimeSelectionOkButton);

        String reason = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_SUBMIT_TIMESHEET,
                "Reason to Amend Timesheet");
        BasePage.typeWithStringBuilder(listViewPage.reasonToAmendTimesheetTextarea, reason);

        selectTime("Paid Breaks Duration", listViewPage.paidBreakDurationInput, listViewPage.
                paidBreakDurationAreaList, listViewPage.availablePaidBreakDuration,
                listViewPage.paidBreakDurationSelectionOkButton);

        selectTime("Unpaid Breaks Duration", listViewPage.unpaidBreakDurationInput, listViewPage.
                        unpaidBreakDurationAreaList, listViewPage.availableUnpaidBreakDuration,
                listViewPage.unpaidBreakDurationSelectionOkButton);

        String paidBreaksNote = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE,
                YML_HEADER_SUBMIT_TIMESHEET, "Paid Breaks Note");
        BasePage.typeWithStringBuilder(listViewPage.paidBreakNoteInput, paidBreaksNote);

        String unpaidBreakNote = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE,
                YML_HEADER_SUBMIT_TIMESHEET, "Unpaid Breaks Note");
        BasePage.typeWithStringBuilder(listViewPage.unpaidBreakNoteInput, unpaidBreakNote);

        BasePage.waitUntilElementClickable(listViewPage.timeSheetUpdateButton, 10);
        BasePage.clickWithJavaScript(listViewPage.timeSheetUpdateButton);
        verifySubmitTimesheetSuccessMessage();
    }

    private void verifySubmitTimesheetSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Updated timesheet for worker";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Submit Timesheet is not success!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    /**
     * Enter care provider/ site and service preference.
     *
     * @param timeKey     time to be selected.
     * @param timeField   web element to be entered.
     * @param timeAreaList  time displaying list web element
     * @param availableTimes  available time in the list
     * @param okButton    Ok button web element
     */
    private void selectTime(String timeKey, WebElement timeField, WebElement timeAreaList,
                            List<WebElement> availableTimes, WebElement okButton) {
        String timeValue = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE_BREAKS,
                YML_HEADER_JOB_DETAILS, YML_HEADER_JOB_DURATION, timeKey);
        BasePage.clickWithJavaScript(timeField);
        BasePage.waitUntilElementPresent(timeAreaList, 60);
        BasePage.waitUntil(() -> !availableTimes.isEmpty(), 60);

        for (WebElement timeOption : availableTimes) {
            BasePage.scrollToWebElement(timeOption);
            BasePage.waitUntilElementClickable(timeOption, 10);
            if (BasePage.getTextWithoutWait(timeOption).equalsIgnoreCase(timeValue)) {
                BasePage.clickWithJavaScript(timeOption);
                break;
            }
        }
        BasePage.clickWithJavaScript(okButton);
    }

    /**
     * Select a date from calendar.
     *
     * @param element     calendar web element.
     * @param date        date to be selected.
     *
     */
    private void selectDateOnCalendar(String header, WebElement element, String date) {
        String dateToBePicked = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE_CREATE_BREAKS,
                YML_HEADER_JOB_DETAILS, YML_HEADER_JOB_DURATION, header, date);
        BasePage.clickWithJavaScript(element);
        genericUtils.selectDateFromCalendarPopup(dateToBePicked);
    }

    private void clickOnSubmitTimesheetButton() {
        BasePage.waitUntilElementClickable(listViewPage.detailViewSubmitTimesheetButtonOn, 60);
        BasePage.clickWithJavaScript(listViewPage.detailViewSubmitTimesheetButtonOn);
    }

    private void clickOnTimesheetsButton() {
        BasePage.waitUntilElementClickable(listViewPage.detailViewTimeSheetsButton, 60);
        BasePage.scrollToWebElement(listViewPage.detailViewTimeSheetsButton);
        BasePage.clickWithJavaScript(listViewPage.detailViewTimeSheetsButton);
    }

    public void approveOrDisputeTimesheet(String action) {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Approving or Disputing the timesheet >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.detailViewApproveTimesheetButtonOn, 60);
        if (action.equalsIgnoreCase("Approves")) {
            BasePage.clickWithJavaScript(listViewPage.detailViewApproveTimesheetButtonOn);
            BasePage.waitUntilElementClickable(listViewPage.approvePopupApproveButton, 60);
            BasePage.clickWithJavaScript(listViewPage.approvePopupApproveButton);
            verifyApproveTimesheetSuccessMessage();
        } else if (action.equalsIgnoreCase("Disputes")) {
            BasePage.clickWithJavaScript(listViewPage.detailViewDisputeTimesheetButtonOn);
            String reason = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, "Dispute Timesheet",
                    "Reason to Dispute");
            BasePage.waitUntilElementPresent(listViewPage.reasonToDisputeTextarea, 60);
            BasePage.typeWithStringBuilder(listViewPage.reasonToDisputeTextarea, reason);
            BasePage.clickWithJavaScript(listViewPage.disputePopupDisputeButton);
        }
    }

    private void verifyApproveTimesheetSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Approved timesheet for worker";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Approving Timesheet is not success!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    public void cancelJobFromDetailPage() {
        String text = getFirstJobId();
        searchJobByJobId(text);
        clickOnViewDetailedJobInfo();
        clickOnCancelJobOnJobDetailsPopup();
        String reason = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                REASON);
        String description = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                DESCRIPTION);
        confirmingCancelJob(reason, description);
        verifyCancelJobFunctionalityOnJobDetailsPopup();
    }

    private String copyFirstJobId() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<< Copying job id >>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.firstCopyJobIdIcon, 60);
        BasePage.clickWithJavaScript(listViewPage.firstCopyJobIdIcon);
        verifyCopyJobIdSuccessMessage();
        String id = ClipboardUtils.getCopiedJobId();
        logger.info("Copied job id: %s {}", id);
        return id;
    }

    private void verifyCopyJobIdSuccessMessage() {
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Successfully copied Job ID";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Copy job id is not working!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    private String getFirstJobId() {
        String jobIdFullText = BasePage.getAttributeValue(listViewPage.firstJobId, "id");
        return jobIdFullText.split("item-body-")[1];
    }

    private void verifyCancelJobFunctionalityOnJobDetailsPopup() {
        logger.info("<<<<<<<<<<<<<<<<<<<< Verifying Cancel Job functionality on Job Detail popup >>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementPresent(listViewPage.successMessage, 30);
        String actualInLowerCase = BasePage.getText(listViewPage.successMessage).toLowerCase().trim();
        String expected = "Cancelled succesfully";
        String expectedInLowerCase = expected.toLowerCase().trim();
        assertThat("Job cancellation is not working!", actualInLowerCase, containsString(
                expectedInLowerCase));
        BasePage.waitUntilElementDisappeared(listViewPage.successMessage, 20);
    }

    public void cancelJobFromViewPage() {
        jobId = getFirstJobId();
        searchJobByJobId(jobId);
        clickOnCancelJob();
        String reason = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                REASON);
        String description = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                DESCRIPTION);
        confirmingCancelJob(reason, description);
        verifyCancelJobFunctionalityOnJobDetailsPopup();
    }

    public void chAdminNote() {
        clickOnChAdminNote();
        String text = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, "Ch Admin Note");
        BasePage.typeWithStringBuilder(listViewPage.cheAdminNoteInput, text);
        BasePage.clickWithJavaScript(listViewPage.chAdminNoteSaveButton);
    }

    public void verifyChAdminNoteSaved() {
        searchJobByJobId(jobId);
        BasePage.waitUntilElementDisplayed(listViewPage.jobViewChAdminNote, 30);
        String actual = BasePage.getText(listViewPage.jobViewChAdminNote).trim();
        String expected = "CH Admin Note";
        assertThat("Ch admin note is not saved!", actual, is(expected));
    }

    public void modifyCancellationReason() {
        clickOnModifyCancellationReason();
    }

    private void clickOnModifyCancellationReason() {
        logger.info("<<<<<<<<<<<<<<<<<< Move to a three dots and Click on Modify Cancellation Reason >>>>>>>>>>>>>>>");
        BasePage.mouseHoverAndClick(JobsListViewPage.firstThreeDots, JobsListViewPage.modifyCancellationReason);

        String reason = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                REASON);
        String description = DataConfigurationReader.readDataFromYmlFile(ENTITY, YML_FILE, YML_HEADER_JOB_CANCEL,
                DESCRIPTION);
        modifyCancellationReason(reason, description);
    }

    // modify cancellation reason popup
    private void modifyCancellationReason(String reason, String description) {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<< Modifying cancellation reason >>>>>>>>>>>>>>>>>>>>>>>>>");
        BasePage.waitUntilElementClickable(listViewPage.reasonDropdownButtonOnModifyCancellationReason, 30);
        BasePage.clickWithJavaScript(listViewPage.reasonDropdownButtonOnModifyCancellationReason);
        BasePage.genericWait(1000);
        By by = By.xpath(listViewPage.getDropdownOptionXpath(reason));
        BasePage.waitUntilVisibilityOfElementLocated(by, 30);
        BasePage.scrollToWebElement(listViewPage.getDropdownOptionXpath(reason));
        BasePage.clickWithJavaScript(listViewPage.getDropdownOptionXpath(reason));

        if (reason.equalsIgnoreCase("Other")) {
            BasePage.waitUntilElementDisplayed(listViewPage.descriptionTextAreaOnCancelJobsPopup, 30);
            BasePage.clearAndEnterTexts(listViewPage.descriptionTextAreaOnCancelJobsPopup, description);
        }

        BasePage.waitUntilElementClickable(listViewPage.modifyCancellationReasonSaveButton, 30);
        BasePage.clickWithJavaScript(listViewPage.modifyCancellationReasonSaveButton);
    }

    public void assignWorker() {
        jobId = getFirstJobId();
        searchJobByJobId(jobId);
        clickOnManageAllocations();
        gotoEligibleWorkersTabOnJobDetailPopup();
        workersFilterByAgencyOnJobDetailsPopup();
        clickOnSuggestButtonOnJobDetails();
        verifyWorkerSuggestSuccessMessage();
        selectSuggestedWorkerOnJobDetailsPopup();
    }

    public void moveToSuggestedTabAndVerifySpecialHolidayWorkerRates() {
        logger.info("<<<<<<<<<<<<<<<<<<<<<<<<<<<< Verifying Special Holiday Worker Rates >>>>>>>>>>>>>>>>>>>>>>>>>");
        gotoSuggestedWorkersTabOnJobDetailPopup();

        // get values from ui
        String actualHourlyRate = getActualRate("Hourly Hate");
        String actualAgencyCharge =getActualRate("Agency Charge");
        String actualCareHiresMargin =getActualRate("CareHires Margin");
        String actualCareHiresVat =getActualRate("CareHires Vat");

        // read values from csv
        List<String> csvValues = CsvReaderUtils.readCsvFile(SPECIAL_CSV);
        if (csvValues == null || csvValues.isEmpty()) {
            throw new RuntimeException("CSV file is empty or not found!");
        }

        SoftAssert softAssert = new SoftAssert();
        softAssert.assertEquals(actualHourlyRate, csvValues.get(3));
        softAssert.assertEquals(actualAgencyCharge, csvValues.get(0));
        softAssert.assertEquals(actualCareHiresMargin, csvValues.get(1));
        softAssert.assertEquals(actualCareHiresVat, csvValues.get(2));
        softAssert.assertAll();
    }

    public String getActualRate(String type) {
        BasePage.waitUntilElementPresent(listViewPage.suggestedWorkerHourlyRate, 30);
        String rateWithCurrency = "";

        switch(type) {
            case "Hourly Hate":
                 rateWithCurrency = BasePage.getText(listViewPage.suggestedWorkerHourlyRate).trim();
                 break;

            case "Agency Charge":
                rateWithCurrency = BasePage.getText(listViewPage.suggestedWorkerAgencyCharge).trim();
                break;

            case "CareHires Margin":
                rateWithCurrency = BasePage.getText(listViewPage.suggestedWorkerCareHiresMargin).trim();
                break;

            case "CareHires Vat":
                rateWithCurrency = BasePage.getText(listViewPage.suggestedWorkerCareHiresVat).trim();
                break;

            default:
                logger.error("Invalid rate provided!");
        }
        String[] texts = rateWithCurrency.split(" ");
        return texts[1];
    }
}
